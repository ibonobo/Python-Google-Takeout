#!/usr/bin/env python
  
# Author: Tashfeen Bhimdi
# Version: 2015-07-05
#
# Modification of code by John Baab (googlecontacts.py v0.1)
# http://pbxinaflash.com/community/index.php?threads/google-contacts-to-asterisk-phonebook.10943/
#
# Purpose: Downloads contacts from Google to a Callcentric Phone Book CSV file
# Requirements: python, gdata python module
# Notes: This is READ-ONLY from Google script:
#        -Contacts are pulled from Google
#        -Pulled contacts are stored in a CSV file
#
# Ubuntu:
# apt-get install python-gdata
# apt-get install python-oauth2client
# 
# Windows (Python Portable 2.7):
# App\Scripts\easy_install.exe gdata
# App\Scripts\easy_install.exe oauth2client
#
# License:
#
# This Package is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public
# License as published by the Free Software Foundation; either
# version 3 of the License, or (at your option) any later version.
#
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public
# License along with this package; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# On Debian & Ubuntu systems, a complete copy of the GPL can be found under
# /usr/share/common-licenses/GPL-3, or (at your option) any later version
  
import os
import re
  
import oauth2client.client
import gdata.contacts.client
import gdata.gauth
  
# GLOBAL VARS
  
# Change if modifying script
gdataSource = "googlecontacts_callcentric_csv"
  
# From https://developers.google.com/api-client-library/python/auth/service-accounts
  
# Go here: https://console.developers.google.com/
# Under APIs & Auth -> APIs: Add Contacts API
# Under APIs & Auth -> Credentials: "Create new Client ID"
# "Service account", "P12 Key"
# Copy P12 key into credentials subdirectory
# (I used the same P12 Key for all accounts)
  
# If using Google Apps, also do this:
# Go here: http://admin.google.com/
# Security -> More Controls -> Advanced Settings -> Authentication -> Manage API client access
# Client name: "Client ID" from above
# Scope: https://www.googleapis.com/auth/contacts.readonly
# Authorize
# (I used the same Client ID for all accounts)
  
# For single account:
# googleUserAccounts = (("person1@gmail.com", "xxxx.p12", "yyyy@zzzz"),)
  
googleUserAccounts = (("person1@gmail.com", "xxxx.p12", "yyyy@zzzz"),
                      ("person2@gmail.com", "xxxx.p12", "yyyy@zzzz"))
  
# Change if not in the US
# Prefixes are removed from contact numbers before inserted into MySQL database
# Use "" if you don't want a prefix removed
countryCode = "1"
internationalDialingCode = "011"
  
# Output file name
csvFileName = "callcentric_whitelist.csv"
  
def Drive():
  
    # Get all contacts
    googleContacts = getGoogleContacts()
  
    # Write to file
    csvFile = open(csvFileName, "w")
    for fullName, phoneNumber in googleContacts:
        line = ",\"%s\",%s,Whitelist\n" % (fullName, phoneNumber)
        csvFile.write(line)
    csvFile.close()
  
def getGoogleContacts():
  
    rx = re.compile('\W+')
    googleContacts = []
    for userEmail, p12Filename, clientEmail in googleUserAccounts:
  
        # Login to Google
        scope = "https://www.googleapis.com/auth/contacts.readonly"
        with open(os.path.join("./credentials", p12Filename)) as f:
            private_key = f.read()
        credentials = oauth2client.client.SignedJwtAssertionCredentials(service_account_name = clientEmail,
                                                                        private_key = private_key,
                                                                        scope = scope,
                                                                        sub = userEmail)
        auth2token = gdata.gauth.OAuth2TokenFromCredentials(credentials)
        client = gdata.contacts.client.ContactsClient(source=gdataSource)
        auth2token.authorize(client)
  
        # Retrieve contacts
        query = gdata.contacts.client.ContactsQuery()
        query.max_results = 10000
        feed = client.get_contacts(q=query)
  
        for entry in feed.entry:
     
            # If contact has a name
            # If contact has a phone number
            # If contact is part of a group ("Other Contacts" autogroup is skipped this way)
            if entry.name is not None and len(entry.phone_number) > 0 and len(entry.group_membership_info) > 0:
     
                # Clean up characters in contact name; replace all non-alphanumerics with spaces
                fullName = entry.name.full_name.text
                fullName = rx.sub(' ', fullName).strip()
     
                for rawPhoneNumber in entry.phone_number:
                     
                    # Remove non-numeric characters from the phone number
                    phoneNumber = re.sub("[^0-9]", "", rawPhoneNumber.text)
     
                    # Remove country code from the phone number
                    if countryCode != "" and phoneNumber.startswith(countryCode):
                        phoneNumber = phoneNumber[len(countryCode):]
     
                    # Remove international dialing code from the phone number
                    if internationalDialingCode != "" and phoneNumber.startswith(internationalDialingCode):
                        phoneNumber = phoneNumber[len(internationalDialingCode):]
     
                    # Save contact for later insert
                    googleContacts.append((fullName, phoneNumber))
  
    # Remove NAME+NUMBER duplicates (if an account has duplicates or multiple accounts have the same contact)
    googleContacts = tuple(set(googleContacts))
  
    return googleContacts
  
if __name__ == "__main__":
    Drive()
